*** For Frontend deployment. The Serverless framework handled our API entirely

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Stuff from the Serverless-Stack tutorial
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now that we have our setup working in our local environment, let’s do our first deploy and look
into what we need to do to host our serverless application.

The basic setup we are going to be using will look something like this:

1. Upload the assets of our app
2. Use a CDN to serve out our assets
3. Point our domain to the CDN distribution
4. Switch to HTTPS with a SSL certificate

AWS provides quite a few services that can help us do the above. We are going to use S3
(https://aws.amazon.com/s3/) to host our assets, CloudFront
(https://aws.amazon.com/cloudfront/) to serve it, Route 53 (https://aws.amazon.com/route53/)
to manage our domain, and Certificate Manager (https://aws.amazon.com/certificatemanager/)
to handle our SSL certificate.

So let’s get started by first configuring our S3 bucket to upload the assets of our app.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Stuff about my actual process
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Configured a new S3 bucket for static website hosting... link:
  - http://serverless-notes-app-client.s3-website.us-east-2.amazonaws.com/
  - The static site has a custom 'bucket policy' granting read only
  - The site will let React handle client side routing so index.html and error.html 
    should both be set to point to index.html!!!

Deploy the React application to the Bucket
  - $ npm run build
    ~ CRA automatically optimizes app for deployment & places assets in 'build/'
  - $ aws s3 sync build/ s3://serverless-notes-app-client
    ~ 'syncs' the build directory with my bucket on S3
  - Now the React App should be accessible at the buckets link! (Not yet w/ HTTPS)

Note: On future projects created based on this tutorial, consider optimizing the bundle.
The AWS SDK is a big library, so think about the effects of instantiating the global twice...
link: https://github.com/AnomalyInnovations/serverless-stack-demo-client/pull/15

Create a CloudFront Distribution (to serve out the app globally(?))
  - From AWS: 'You store your files in an origin - either an Amazon S3 bucket or a web server. 
    After you create the distribution, you can add more origins to the distribution.'
  - Create a new web distribution (click 'get started')
    ~ Set origin domain name as 'http://serverless-notes-app-client.s3-website.us-east-2.amazonaws.com'
    ~ Set 'compress objects automatically' to 'yes' (Uses gzip compression for assets responses)
    ~ set the Default Root Object to 'index.html' (The root of our React app)
  - AWS takes awhile to setup the distribution. (it took me 15-20 min)
    ~ Once done, navigate to it from its listed 'domain name': http://d3r3zsl9wjee75.cloudfront.net/

*** Note: Currently, our static website returns our index.html as the error page. We set this up when we 
created our S3 bucket. However, it returns a HTTP status code of 404 when it does so. We want to return 
the index.html but since the routing is handled by React Router; it does not make sense that we return 
the 404 HTTP status code. One of the issues with this is that certain corporate firewalls and proxies 
tend to block 4xx and 5xx responses.

  - To set up a custom error response, head over to the Error Pages tab in our Distribution.
   ~ And select Create Custom Error Response.
   ~ Pick 404 for the HTTP Error Code and select Customize Error Response. 
      Enter /index.html for the Response Page Path and 200 for the HTTP Response Code.
   ~ And hit Create. This is basically telling CloudFront to respond to any 404 responses 
      from our S3 bucket with the index.html and a 200 status code. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Stuff from the Serverless-Stack tutorial
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now let’s look at how we make changes and update our app. The process is very similar to how we deployed our
 code to S3 but with a few changes. Here is what it looks like.

1. Build our app with the changes
2. Deploy to the main S3 Bucket
3. Invalidate the cache in both our CloudFront Distributions
  We need to do the last step since CloudFront caches our objects in its edge locations. So to make sure that 
  our users see the latest version, we need to tell CloudFront to invalidate it’s cache in the edge locations.

